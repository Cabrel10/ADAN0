#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Script de monitoring en temps r√©el pour l'entra√Ænement ADAN.
Surveille les performances, flux mon√©taires et m√©triques d'entra√Ænement.
"""
import os
import sys
import time
import json
import argparse
import threading
from datetime import datetime, timedelta
from pathlib import Path
import signal

# Rich imports pour interface
from rich.console import Console
from rich.live import Live
from rich.table import Table
from rich.panel import Panel
from rich.layout import Layout
from rich.text import Text
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn
from rich.align import Align

# Ajouter le r√©pertoire parent au path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

console = Console()

class TrainingMonitor:
    """Moniteur temps r√©el des performances d'entra√Ænement."""

    def __init__(self, log_dir="reports", refresh_rate=2.0):
        self.log_dir = Path(log_dir)
        self.refresh_rate = refresh_rate
        self.running = False
        self.start_time = datetime.now()

        # M√©triques de suivi
        self.metrics_history = []
        self.current_metrics = {}
        self.alerts = []

        # Fichiers √† surveiller
        self.tensorboard_dir = self.log_dir / "tensorboard_logs"
        self.training_logs = []

    def find_training_logs(self):
        """Trouve les fichiers de logs d'entra√Ænement r√©cents."""
        log_patterns = [
            "training_*.log",
            "*.log"
        ]

        recent_logs = []
        for pattern in log_patterns:
            for log_file in Path(".").glob(pattern):
                # V√©rifier si le fichier a √©t√© modifi√© r√©cemment (derni√®res 24h)
                if log_file.stat().st_mtime > time.time() - 86400:
                    recent_logs.append(log_file)

        return sorted(recent_logs, key=lambda x: x.stat().st_mtime, reverse=True)

    def parse_log_metrics(self, log_file):
        """Parse les m√©triques depuis un fichier de log."""
        try:
            with open(log_file, 'r') as f:
                lines = f.readlines()

            metrics = {}
            for line in reversed(lines[-100:]):  # Derni√®res 100 lignes
                line = line.strip()

                # Parser diff√©rents formats de m√©triques
                if "Capital:" in line and "$" in line:
                    try:
                        capital_part = line.split("Capital:")[1].split()[0]
                        capital = float(capital_part.replace("$", "").replace(",", ""))
                        metrics['capital'] = capital
                    except:
                        pass

                if "ROI:" in line and "%" in line:
                    try:
                        roi_part = line.split("ROI:")[1].split("%")[0].strip()
                        roi = float(roi_part.replace("+", ""))
                        metrics['roi_pct'] = roi
                    except:
                        pass

                if "Step" in line and "/" in line:
                    try:
                        step_part = line.split("Step")[1].split("/")[0].strip()
                        current_step = int(step_part.replace(",", ""))
                        metrics['current_step'] = current_step
                    except:
                        pass

                if "Reward" in line:
                    try:
                        if ":" in line:
                            reward_part = line.split(":")[-1].strip()
                            reward = float(reward_part)
                            metrics['reward'] = reward
                    except:
                        pass

            return metrics
        except Exception as e:
            return {}

    def check_model_files(self):
        """V√©rifie l'existence et la taille des mod√®les."""
        model_info = {}

        models_dir = Path("models")
        if models_dir.exists():
            for model_file in models_dir.glob("*.zip"):
                stat = model_file.stat()
                model_info[model_file.name] = {
                    'size_mb': stat.st_size / (1024 * 1024),
                    'modified': datetime.fromtimestamp(stat.st_mtime),
                    'age_minutes': (datetime.now() - datetime.fromtimestamp(stat.st_mtime)).total_seconds() / 60
                }

        return model_info

    def generate_alerts(self):
        """G√©n√®re des alertes bas√©es sur les m√©triques actuelles."""
        alerts = []

        if 'capital' in self.current_metrics:
            capital = self.current_metrics['capital']
            if capital < 5.0:
                alerts.append("üö® CAPITAL CRITIQUE: ${:.2f}".format(capital))
            elif capital < 10.0:
                alerts.append("‚ö†Ô∏è Capital faible: ${:.2f}".format(capital))

        if 'roi_pct' in self.current_metrics:
            roi = self.current_metrics['roi_pct']
            if roi < -50:
                alerts.append("üìâ ROI tr√®s n√©gatif: {:.1f}%".format(roi))
            elif roi > 50:
                alerts.append("üìà ROI excellent: +{:.1f}%".format(roi))

        # V√©rifier si l'entra√Ænement semble bloqu√©
        if len(self.metrics_history) > 5:
            recent_steps = [m.get('current_step', 0) for m in self.metrics_history[-5:]]
            if len(set(recent_steps)) == 1 and recent_steps[0] > 0:
                alerts.append("‚è∏Ô∏è Entra√Ænement possiblement bloqu√©")

        return alerts

    def create_dashboard(self):
        """Cr√©e le tableau de bord principal."""
        layout = Layout()

        # Division principale
        layout.split_column(
            Layout(name="header", size=3),
            Layout(name="main"),
            Layout(name="footer", size=6)
        )

        # Division du contenu principal
        layout["main"].split_row(
            Layout(name="left"),
            Layout(name="right")
        )

        # Header avec titre et temps
        elapsed = datetime.now() - self.start_time
        header_text = Text.assemble(
            ("üöÄ ADAN Training Monitor", "bold blue"),
            (" | ", "dim"),
            (f"Uptime: {str(elapsed).split('.')[0]}", "green"),
            (" | ", "dim"),
            (f"Refresh: {self.refresh_rate}s", "dim")
        )
        layout["header"] = Panel(Align.center(header_text), style="blue")

        # M√©triques principales (gauche)
        metrics_table = Table(title="üìä M√©triques Temps R√©el", title_style="bold cyan")
        metrics_table.add_column("M√©trique", style="dim")
        metrics_table.add_column("Valeur", style="bright_white")
        metrics_table.add_column("Status", style="green")

        # Ajouter les m√©triques actuelles
        if 'capital' in self.current_metrics:
            capital = self.current_metrics['capital']
            status = "üü¢" if capital >= 15.0 else "üü°" if capital >= 10.0 else "üî¥"
            metrics_table.add_row("üí∞ Capital", f"${capital:.2f}", status)

        if 'roi_pct' in self.current_metrics:
            roi = self.current_metrics['roi_pct']
            status = "üü¢" if roi >= 0 else "üü°" if roi >= -20 else "üî¥"
            metrics_table.add_row("üìà ROI", f"{roi:+.2f}%", status)

        if 'current_step' in self.current_metrics:
            step = self.current_metrics['current_step']
            metrics_table.add_row("üéØ Step Actuel", f"{step:,}", "üü¢")

        if 'reward' in self.current_metrics:
            reward = self.current_metrics['reward']
            status = "üü¢" if reward >= 0 else "üü°" if reward >= -1 else "üî¥"
            metrics_table.add_row("‚≠ê R√©compense", f"{reward:.4f}", status)

        layout["left"] = Panel(metrics_table, title="M√©triques", border_style="cyan")

        # Informations syst√®me (droite)
        system_table = Table(title="üñ•Ô∏è Syst√®me", title_style="bold yellow")
        system_table.add_column("Composant", style="dim")
        system_table.add_column("Status", style="bright_white")

        # V√©rifier les mod√®les
        model_info = self.check_model_files()
        if model_info:
            latest_model = max(model_info.items(), key=lambda x: x[1]['modified'])
            system_table.add_row(
                "üìÅ Dernier Mod√®le",
                f"{latest_model[0]} ({latest_model[1]['size_mb']:.1f}MB)"
            )
            system_table.add_row(
                "‚è∞ Derni√®re Sauvegarde",
                f"{latest_model[1]['age_minutes']:.0f}min ago"
            )

        # Logs actifs
        training_logs = self.find_training_logs()
        if training_logs:
            system_table.add_row("üìù Logs Actifs", f"{len(training_logs)} fichiers")

        # Historique des m√©triques
        if len(self.metrics_history) > 1:
            system_table.add_row("üìä Historique", f"{len(self.metrics_history)} points")

        layout["right"] = Panel(system_table, title="Syst√®me", border_style="yellow")

        # Footer construction starts here
        alerts_panel = None
        # Use self.generate_alerts() as it's a method of the class
        current_alerts = self.generate_alerts() # Call it once
        if current_alerts: # Check if the list of alert strings is non-empty
            alerts_text = "\n".join(current_alerts)
            if alerts_text: # Check if the joined string is not empty
                alerts_panel = Panel(alerts_text, title="üö® Alertes", border_style="red")

        instructions_text = (
            "[bold cyan]Contr√¥les:[/bold cyan] Ctrl+C pour quitter | "
            "[dim]Moniteur automatique des performances ADAN[/dim]"
        )
        instructions_panel = Panel(instructions_text, border_style="dim")

        if alerts_panel:
            # Both alerts and instructions need to be displayed.
            # Create a new Layout for the footer that will contain these two, potentially side-by-side.
            footer_combined_layout = Layout(name="footer_split")

            # Split this new layout into two columns (adjust ratio/size as needed)
            # Using ratio based split as an example
            footer_combined_layout.split_row(
                Layout(name="alerts_col", ratio=1),
                Layout(name="instructions_col", ratio=2) # Example: instructions take more space
            )

            # Populate these new columns with the panel content
            footer_combined_layout["alerts_col"].update(alerts_panel)
            footer_combined_layout["instructions_col"].update(instructions_panel)

            # Update the main layout's "footer" region with this composite layout
            layout["footer"].update(footer_combined_layout)
        else:
            # Only instructions panel needs to be displayed.
            # Update the main layout's "footer" region directly with the instructions_panel.
            layout["footer"].update(instructions_panel)

        return layout

    def update_metrics(self):
        """Met √† jour les m√©triques depuis les logs."""
        training_logs = self.find_training_logs()

        if not training_logs:
            return

        # Parser le log le plus r√©cent
        latest_log = training_logs[0]
        new_metrics = self.parse_log_metrics(latest_log)

        if new_metrics:
            # Ajouter timestamp
            new_metrics['timestamp'] = datetime.now()

            # Mettre √† jour les m√©triques actuelles
            self.current_metrics.update(new_metrics)

            # Ajouter √† l'historique
            self.metrics_history.append(new_metrics.copy())

            # Garder seulement les 100 derniers points
            if len(self.metrics_history) > 100:
                self.metrics_history = self.metrics_history[-100:]

    def run(self):
        """Lance le monitoring en temps r√©el."""
        self.running = True

        with Live(self.create_dashboard(), refresh_per_second=1/self.refresh_rate, console=console) as live:
            try:
                while self.running:
                    # Mettre √† jour les m√©triques
                    self.update_metrics()

                    # Mettre √† jour l'affichage
                    live.update(self.create_dashboard())

                    # Attendre avant la prochaine mise √† jour
                    time.sleep(self.refresh_rate)

            except KeyboardInterrupt:
                self.running = False
                console.print("\n[yellow]‚èπÔ∏è Monitoring arr√™t√© par l'utilisateur[/yellow]")

    def stop(self):
        """Arr√™te le monitoring."""
        self.running = False

def signal_handler(signum, frame, monitor):
    """Gestionnaire de signal pour arr√™t propre."""
    monitor.stop()

def main():
    parser = argparse.ArgumentParser(description='ADAN Training Monitor - Surveillance Temps R√©el')

    parser.add_argument('--refresh', type=float, default=2.0,
                        help='Taux de rafra√Æchissement en secondes (d√©faut: 2.0)')
    parser.add_argument('--log-dir', type=str, default='reports',
                        help='R√©pertoire des logs (d√©faut: reports)')

    args = parser.parse_args()

    # Affichage de d√©marrage
    console.print(Panel.fit(
        "[bold green]üöÄ ADAN Training Monitor[/bold green]\n"
        f"[cyan]Taux de rafra√Æchissement: {args.refresh}s[/cyan]\n"
        "[yellow]Appuyez sur Ctrl+C pour arr√™ter[/yellow]",
        title="D√©marrage du Monitoring"
    ))

    # Cr√©er et lancer le moniteur
    monitor = TrainingMonitor(log_dir=args.log_dir, refresh_rate=args.refresh)

    # Configurer le gestionnaire de signal
    signal.signal(signal.SIGINT, lambda s, f: signal_handler(s, f, monitor))

    try:
        monitor.run()
    except Exception as e:
        console.print(f"[red]‚ùå Erreur du monitoring: {str(e)}[/red]")
        return 1

    console.print("[green]‚úÖ Monitoring termin√©[/green]")
    return 0

if __name__ == "__main__":
    sys.exit(main())
