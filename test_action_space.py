#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test script to verify action space dimensions for the ADAN trading bot.

This script helps diagnose action space dimension mismatches between
the environment and the PPO model.
"""

import sys
import os
import yaml
import numpy as np
import torch
import logging

# Add project root to path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from src.adan_trading_bot.environment.multi_asset_chunked_env import (
    MultiAssetChunkedEnv,
)

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def test_action_space_dimensions():
    """Test the action space dimensions of the environment."""

    print("=" * 60)
    print("üîç DIAGNOSTIC DE L'ESPACE D'ACTION")
    print("=" * 60)

    # Load configuration
    try:
        with open("config/config.yaml", "r") as f:
            config = yaml.safe_load(f)
        print("‚úÖ Configuration charg√©e avec succ√®s")
    except Exception as e:
        print(f"‚ùå Erreur lors du chargement de la configuration: {e}")
        return False

    # Extract assets from config
    assets = config.get("data", {}).get("assets", [])
    print(f"üìä Actifs configur√©s: {assets} (nombre: {len(assets)})")

    # Expected action space dimensions
    expected_dim = (
        len(assets) * 3
    )  # 3 values per asset (decision, risk_horizon, position_size)
    print(
        f"üéØ Dimension d'action attendue: {expected_dim} (= {len(assets)} actifs √ó 3)"
    )

    # Create environment
    try:
        # Use minimal worker_id for testing
        # Extract required parameters from config
        data_config = config.get("data", {})
        timeframes = data_config.get("timeframes", ["5m", "1h", "4h"])
        window_size = config.get("environment", {}).get("window_size", 20)
        features_config = config.get("environment", {}).get("features_config", {})

        env = MultiAssetChunkedEnv(
            config=config,
            worker_id=0,
            data=data_config,
            timeframes=timeframes,
            window_size=window_size,
            features_config=features_config,
        )
        print("‚úÖ Environnement cr√©√© avec succ√®s")

        # Check action space
        action_space = env.action_space
        print(f"üìè Espace d'action d√©tect√©: {action_space}")
        print(f"üìê Forme de l'espace d'action: {action_space.shape}")

        if hasattr(action_space, "shape"):
            actual_dim = (
                action_space.shape[0]
                if len(action_space.shape) == 1
                else np.prod(action_space.shape)
            )
            print(f"üî¢ Dimension r√©elle: {actual_dim}")

            if actual_dim == expected_dim:
                print("‚úÖ SUCC√àS: Les dimensions correspondent!")
            else:
                print(
                    f"‚ùå ERREUR: Dimension attendue ({expected_dim}) != dimension r√©elle ({actual_dim})"
                )
                return False

        # Test action generation
        print("\nüß™ Test de g√©n√©ration d'actions:")

        # Generate random action with correct dimensions
        action = env.action_space.sample()
        print(f"Action √©chantillonn√©e: {action}")
        print(f"Forme de l'action: {action.shape}")
        print(f"Type de l'action: {type(action)}")

        # Test manual action with correct dimensions
        manual_action = np.random.uniform(-1, 1, size=(expected_dim,))
        print(f"Action manuelle: {manual_action}")
        print(f"Forme de l'action manuelle: {manual_action.shape}")

        # Test action space validation
        try:
            # This should pass if our action space is correct
            clipped_action = np.clip(
                manual_action, env.action_space.low, env.action_space.high
            )
            print("‚úÖ Action valid√©e par l'espace d'action")
        except Exception as e:
            print(f"‚ùå Erreur de validation de l'action: {e}")
            return False

        # Test step function (minimal)
        try:
            obs, info = env.reset()
            print("‚úÖ Reset de l'environnement r√©ussi")
            print(
                f"Observation shape: {type(obs)} - {obs.keys() if hasattr(obs, 'keys') else 'Non-dict obs'}"
            )

            # Try to step with correct action
            obs, reward, done, truncated, info = env.step(manual_action)
            print("‚úÖ Step de l'environnement r√©ussi!")
            print(f"Reward: {reward}, Done: {done}, Truncated: {truncated}")

        except Exception as e:
            print(f"‚ùå Erreur lors du step: {e}")
            # This might fail due to other reasons, but the action dimension should be OK
            if "Action shape" in str(e):
                print("üö® Erreur de dimension d'action confirm√©e!")
                return False
            else:
                print("‚ö†Ô∏è  Erreur non li√©e aux dimensions d'action (peut √™tre ignor√©e)")

        print("\nüéâ Test de l'espace d'action termin√© avec succ√®s!")
        return True

    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation de l'environnement: {e}")
        return False


def test_ppo_model_compatibility():
    """Test PPO model creation with the environment."""

    print("\n" + "=" * 60)
    print("ü§ñ TEST DE COMPATIBILIT√â PPO")
    print("=" * 60)

    try:
        from sb3_contrib import RecurrentPPO
        from src.adan_trading_bot.agent.custom_recurrent_policy import (
            CustomRecurrentPolicy,
        )

        # Load configuration
        with open("config/config.yaml", "r") as f:
            config = yaml.safe_load(f)

        # Create environment
        # Extract required parameters from config
        data_config = config.get("data", {})
        timeframes = data_config.get("timeframes", ["5m", "1h", "4h"])
        window_size = config.get("environment", {}).get("window_size", 20)
        features_config = config.get("environment", {}).get("features_config", {})

        env = MultiAssetChunkedEnv(
            config=config,
            worker_id=0,
            data=data_config,
            timeframes=timeframes,
            window_size=window_size,
            features_config=features_config,
        )

        print(f"üìä Espace d'action de l'env: {env.action_space}")
        print(f"üìä Espace d'observation de l'env: {env.observation_space}")

        # Try to create PPO model
        model = RecurrentPPO(
            policy=CustomRecurrentPolicy,
            env=env,
            verbose=1,
            device="cpu",  # Force CPU for testing
        )

        print("‚úÖ Mod√®le PPO cr√©√© avec succ√®s!")

        # Test action prediction
        obs, info = env.reset()
        action, _states = model.predict(obs, deterministic=True)

        print(f"üé¨ Action pr√©dite par PPO: {action}")
        print(f"üìê Forme de l'action PPO: {action.shape}")

        expected_dim = len(config.get("data", {}).get("assets", [])) * 3
        if action.shape[0] == expected_dim:
            print("‚úÖ SUCC√àS: PPO g√©n√®re des actions avec les bonnes dimensions!")
            return True
        else:
            print(
                f"‚ùå ERREUR: PPO g√©n√®re des actions de dimension {action.shape[0]}, attendu {expected_dim}"
            )
            return False

    except ImportError as e:
        print(f"‚ö†Ô∏è  sb3-contrib non disponible pour le test PPO: {e}")
        return None
    except Exception as e:
        print(f"‚ùå Erreur lors du test PPO: {e}")
        return False


if __name__ == "__main__":
    print("üöÄ D√âMARRAGE DU DIAGNOSTIC DE L'ESPACE D'ACTION")
    print("=" * 60)

    # Test 1: Environment action space
    env_test_passed = test_action_space_dimensions()

    # Test 2: PPO compatibility
    ppo_test_result = test_ppo_model_compatibility()

    # Summary
    print("\n" + "=" * 60)
    print("üìã R√âSUM√â DU DIAGNOSTIC")
    print("=" * 60)
    print(f"üîß Test environnement: {'‚úÖ PASS√â' if env_test_passed else '‚ùå √âCHEC'}")

    if ppo_test_result is True:
        print("ü§ñ Test PPO: ‚úÖ PASS√â")
    elif ppo_test_result is False:
        print("ü§ñ Test PPO: ‚ùå √âCHEC")
    else:
        print("ü§ñ Test PPO: ‚ö†Ô∏è  NON DISPONIBLE")

    if env_test_passed and ppo_test_result is not False:
        print("\nüéâ DIAGNOSTIC GLOBAL: SUCC√àS!")
        sys.exit(0)
    else:
        print("\nüí• DIAGNOSTIC GLOBAL: PROBL√àMES D√âTECT√âS!")
        sys.exit(1)
