"""
ConfigWatcher - Syst√®me de surveillance et rechargement dynamique des configurations YAML.

Ce module permet de surveiller les fichiers de configuration et d'appliquer les changements
en temps r√©el pendant l'ex√©cution, sans red√©marrer le processus. Il inclut √©galement
une validation des sch√©mas de configuration via le ConfigValidator.

Fonctionnalit√©s cl√©s:
- D√©tection automatique des modifications de fichiers de configuration
- Validation des sch√©mas avant application des changements
- Notifications en temps r√©el des mises √† jour via callbacks
- Support pour les rechargements partiels (uniquement les composants impact√©s)
- Gestion robuste des erreurs et des configurations invalides

Exemple d'utilisation:
    ```python
    # Cr√©ation d'un observateur de configuration
    watcher = ConfigWatcher(config_dir="chemin/vers/configs", validate=True)

    # Enregistrement d'un callback pour les changements de configuration
    def on_training_config_change(config_type, new_config, changes):
        print(f"Configuration {config_type} modifi√©e! Changements: {changes}")

    watcher.register_callback('training', on_training_config_change)

    # Utilisation du d√©corateur pour les m√©thodes r√©actives
    class MonComposant:
        def __init__(self, config_watcher):
            self.config_watcher = config_watcher
            self.config_watcher.register_callback('training', self.on_config_change)

        @config_reactive('training')
        def on_config_change(self, config_type, new_config, changes):
            print(f"Mise √† jour de la configuration {config_type}")
    ```

Note:
    - Les configurations sont charg√©es de mani√®re paresseuse au premier acc√®s
    - Les validations sont effectu√©es avant chaque rechargement
    - Les callbacks sont ex√©cut√©s dans des threads s√©par√©s
"""
import os
import time
import yaml
import logging
from pathlib import Path
from typing import Any, Dict, List, Optional, Type, Callable, Union, Tuple
from types import TracebackType
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from datetime import datetime, timedelta

from . import config_validator
from .utils import get_logger

logger = get_logger(__name__)

class ConfigFileHandler(FileSystemEventHandler):
    """
    Handler pour les √©v√©nements de modification de fichiers de configuration.

    Attributes:
        config_watcher: R√©f√©rence vers l'instance ConfigWatcher parente
    """

    def __init__(self, config_watcher: 'ConfigWatcher'):
        self.config_watcher = config_watcher

    def on_modified(self, event):
        """Appel√© quand un fichier est modifi√©."""
        if not event.is_directory and event.src_path.endswith('.yaml'):
            logger.info(f"Configuration file modified: {event.src_path}")
            self.config_watcher._handle_config_change(event.src_path)

class ConfigWatcher:
    """Surveille les fichiers de configuration YAML et g√®re leur rechargement dynamique.

    Cette classe permet de charger, surveiller et g√©rer des configurations au format YAML
    avec les fonctionnalit√©s suivantes :
    - Chargement initial des configurations depuis le r√©pertoire sp√©cifi√©
    - D√©tection automatique des modifications des fichiers de configuration
    - Validation des configurations via des sch√©mas d√©finis
    - Notification des composants int√©ress√©s via un syst√®me de callbacks
    - Gestion thread-safe des acc√®s concurrents
    - Notifications asynchrones via callbacks
    - Gestion des erreurs et reprise sur √©chec
    - Support des rechargements partiels (uniquement les composants impact√©s)

    La classe est con√ßue pour √™tre fiable m√™me en cas de fichiers corrompus ou de validations √©chou√©es,
    en conservant toujours une configuration valide en m√©moire.

    Attributes:
        config_dir (Path): R√©pertoire contenant les fichiers de configuration
        enabled (bool): Si False, d√©sactive la surveillance des fichiers
        validate_schemas (bool): Si True, valide les sch√©mas avant d'appliquer les changements
        callbacks (Dict[str, List[Callable]]): Dictionnaire des callbacks par type de configuration
        current_configs (Dict[str, Dict]): Dictionnaire des configurations courantes par type
        last_reload_times (Dict[str, datetime]): Dernier moment de rechargement par type de config
        watched_files (Dict[str, str]): Mapping des noms de fichiers vers leur type de configuration

    Raises:
        FileNotFoundError: Si le r√©pertoire de configuration n'existe pas
        yaml.YAMLError: Si un fichier de configuration contient du YAML invalide
        ValidationError: Si la validation du sch√©ma √©choue (uniquement si validate_schemas=True)

    Example:
        ```python
        # Cr√©ation avec validation activ√©e
        watcher = ConfigWatcher('/chemin/vers/configs', validate=True)

        # Enregistrement d'un callback
        def log_changes(config_type, new_config, changes):
            logger.info(f"Configuration {config_type} modifi√©e")
            for key, change in changes.items():
                logger.info(f"  - {key}: {change['old_value']} -> {change['new_value']}")

        watcher.register_callback('training', log_changes)

        # R√©cup√©ration de la configuration actuelle
        training_config = watcher.get_config('training')

        # Arr√™t de la surveillance
        watcher.stop()
        ```
    """
    def __init__(self, config_dir: Union[str, Path], validate: Optional[bool] = None, validate_schemas: Optional[bool] = None):
        """Initialise le ConfigWatcher avec le r√©pertoire de configuration.

        Cette m√©thode initialise le surveillant de configuration, charge les configurations
        initiales et d√©marre la surveillance des modifications de fichiers.

        Args:
            config_dir (Union[str, Path]):
                Chemin vers le r√©pertoire contenant les fichiers de configuration YAML.
                Les fichiers doivent suivre la convention de nommage `type_config.yaml`.
                Exemple : `training.yaml`, `environment.yaml`.

            validate (bool, optional):
                Alias attendu par les tests pour activer/d√©sactiver la validation des sch√©mas.
                Si sp√©cifi√©, a priorit√© sur `validate_schemas`.

            validate_schemas (bool, optional):
                Param√®tre historique/alternatif pour activer la validation des sch√©mas.

        Raises:
            FileNotFoundError: Si le r√©pertoire de configuration n'existe pas
            PermissionError: Si l'acc√®s au r√©pertoire est refus√©
            yaml.YAMLError: En cas d'erreur de syntaxe dans les fichiers YAML

        Example:
            ```python
            # Cr√©ation avec validation des sch√©mas activ√©e (par d√©faut)
            watcher = ConfigWatcher("/chemin/vers/configs")

            # Cr√©ation avec validation d√©sactiv√©e (pour les tests ou si la validation n'est pas n√©cessaire)
            watcher = ConfigWatcher("/chemin/vers/configs", validate_schemas=False)
            ```

        Note:
            - Le chargement initial des configurations est effectu√© de mani√®re paresseuse
              (au premier acc√®s via `get_config` ou `get_all_configs`)
            - La surveillance des fichiers commence imm√©diatement apr√®s l'initialisation
            - Utilisez le gestionnaire de contexte (`with`) pour une lib√©ration propre des ressources
        """
        self.config_dir = Path(config_dir)
        self.enabled = True
        # R√©solution du drapeau de validation avec compatibilit√© ascendante
        if validate is not None:
            effective_validate = bool(validate)
        elif validate_schemas is not None:
            effective_validate = bool(validate_schemas)
        else:
            effective_validate = True
        self.validate_schemas = effective_validate
        self.observer = None
        self.callbacks: Dict[str, List[Callable]] = {}
        self.current_configs: Dict[str, Dict[str, Any]] = {}
        self.last_reload_times: Dict[str, datetime] = {}
        # Anti-bounce pour √©v√©nements multiples tr√®s rapproch√©s (write + move)
        self._last_event_times: Dict[str, datetime] = {}

        # Fichiers de configuration surveill√©s avec leurs types
        self.watched_files = {
            'train_config.yaml': 'training',
            'environment_config.yaml': 'environment',
            'agent_config.yaml': 'agent',
            'dbe_config.yaml': 'dbe',
            'reward_config.yaml': 'reward',
            'risk_config.yaml': 'risk',
            'config.yaml': 'main'  # Fichier de configuration principal
        }

        # Mappage des types de configuration vers les m√©thodes de validation
        self.validation_methods = {
            'main': 'validate_main_config',
            'training': 'validate_train_config',
            'environment': 'validate_environment_config',
            'agent': 'validate_agent_config',
            'dbe': 'validate_dbe_config',
            'reward': 'validate_reward_config',
            'risk': 'validate_risk_config'
        }

        # Chargement initial des configurations
        self._load_initial_configs()

        if self.enabled:
            self._start_watching()
            logger.info(f"üîç ConfigWatcher started - monitoring {self.config_dir}")
        else:
            logger.info("ConfigWatcher disabled")

    def _load_initial_configs(self):
        """Charge toutes les configurations initiales."""
        for filename, config_type in self.watched_files.items():
            config_path = self.config_dir / filename
            if config_path.exists():
                try:
                    with open(config_path, 'r', encoding='utf-8') as f:
                        config = yaml.safe_load(f)
                        self.current_configs[config_type] = config
                except Exception as e:
                    logger.error(f"Erreur lors du chargement de {config_path.name}: {e}")

    def _start_watching(self) -> None:
        """D√©marre la surveillance des fichiers de configuration.

        Cette m√©thode initialise et d√©marre l'observateur de fichiers qui surveille
        les modifications des fichiers de configuration dans le r√©pertoire configur√©.

        Le processus de surveillance comprend :
        1. Cr√©ation d'une instance de l'observateur
        2. Configuration du gestionnaire d'√©v√©nements pour les modifications de fichiers
        3. D√©marrage du thread d'observation en arri√®re-plan

        La m√©thode est appel√©e automatiquement lors de l'initialisation du ConfigWatcher
        si la surveillance est activ√©e.

        Raises:
            RuntimeError: Si l'observateur ne peut pas √™tre d√©marr√©

        Example:
            ```python
            # D√©marrer la surveillance manuellement (normalement g√©r√© par __init__)
            watcher = ConfigWatcher("chemin/vers/configs")
            watcher._start_watching()
            ```

        Note:
            - Ne pas appeler cette m√©thode directement sauf si vous savez ce que vous faites
            - La m√©thode est idempotente (plusieurs appels n'ont pas d'effet suppl√©mentaire)
            - Les erreurs sont journalis√©es mais pas propag√©es pour √©viter d'interrompre le flux principal
        """
        if self.observer is not None:
            logger.debug("La surveillance est d√©j√† en cours")
            return

        try:
            self.observer = Observer()
            event_handler = ConfigFileHandler(self)
            self.observer.schedule(event_handler, str(self.config_dir), recursive=False)
            self.observer.start()
            logger.info(f"Surveillance d√©marr√©e pour {self.config_dir}")
        except Exception as e:
            logger.error(f"√âchec du d√©marrage de la surveillance: {e}")
            raise RuntimeError(f"Impossible de d√©marrer la surveillance: {e}")

    def _load_config_file(self, config_file: Path) -> None:
        """Charge un fichier de configuration YAML en m√©moire.

        Cette m√©thode est responsable du chargement d'un fichier de configuration,
        de sa validation selon le sch√©ma appropri√©, et de son stockage dans le
        dictionnaire des configurations courantes.

        Le processus de chargement comprend :
        1. V√©rification que le fichier est bien enregistr√© dans watched_files
        2. Chargement du contenu YAML du fichier
        3. Validation du contenu avec le sch√©ma appropri√©
        4. Mise √† jour de la configuration courante et de l'horodatage

        Args:
            config_file: Chemin vers le fichier de configuration √† charger

        Returns:
            None: La m√©thode modifie l'√©tat interne mais ne retourne rien

        Raises:
            yaml.YAMLError: Si le fichier YAML est mal form√©
            FileNotFoundError: Si le fichier n'existe pas

        Example:
            ```python
            # Chargement d'un fichier de configuration
            watcher._load_config_file(Path("/chemin/vers/training.yaml"))
            ```

        Note:
            - Les fichiers inconnus (non pr√©sents dans watched_files) sont ignor√©s
            - Les erreurs de validation n'interrompent pas l'ex√©cution
            - Les configurations valides remplacent les pr√©c√©dentes
        """
        filename = config_file.name
        config_type = self.watched_files.get(filename)

        if config_type is None:
            logger.warning(f"Fichier de configuration non surveill√© ignor√©: {filename}")
            return

        logger.debug(f"Chargement du fichier de configuration: {filename}")
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f) or {}

            # Validation du sch√©ma si activ√©e
            if self.validate_schemas and not self._validate_config(config, config_type, filename):
                logger.error(f"Configuration invalide dans {filename}, chargement annul√©")
                return

            # Mise √† jour de la configuration
            self.current_configs[config_type] = config
            self.last_reload_times[config_type] = datetime.now()
            logger.info(f"Configuration charg√©e avec succ√®s: {filename}")

        except yaml.YAMLError as e:
            logger.error(f"Erreur de syntaxe YAML dans {filename}: {e}")
        except FileNotFoundError:
            logger.error(f"Fichier de configuration non trouv√©: {filename}")
        except Exception as e:
            logger.error(f"Erreur lors du chargement de {filename}: {e}")

    def _validate_config(self, config: Dict[str, Any], config_type: str, filename: str) -> bool:
        """Valide une configuration avec le sch√©ma appropri√©.

        Cette m√©thode effectue la validation des configurations selon les r√®gles suivantes :
        - Si validate_schemas est False, la validation est ignor√©e (retourne toujours True)
        - Pour le type 'main', valide toutes les configurations avec validate_all_configs
        - Pour les autres types, utilise la m√©thode de validation sp√©cifique si elle existe
        - Les erreurs de validation sont journalis√©es pour le d√©bogage

        La validation est essentielle pour garantir l'int√©grit√© des configurations avant leur
        application dans le syst√®me. Elle permet de d√©tecter les erreurs de configuration
        avant qu'elles ne provoquent des comportements inattendus.

        Args:
            config: Dictionnaire contenant la configuration √† valider
            config_type: Type de configuration (training, environment, etc.)
            filename: Nom du fichier source pour les messages d'erreur

        Returns:
            bool: True si la configuration est valide, False en cas d'√©chec de validation

        Raises:
            ValueError: Si le type de configuration n'est pas reconnu

        Example:
            ```python
            # Validation d'une configuration
            is_valid = watcher._validate_config(
                config={"learning_rate": 0.001, "batch_size": 32},
                config_type="training",
                filename="training.yaml"
            )
            ```
        """
        if not self.validate_schemas:
            return True

        validator = config_validator.ConfigValidator()

        if config_type == 'main':
            return validator.validate_all_configs(self.config_dir)

        # Sinon, on valide uniquement la section correspondante
        validation_method = getattr(validator, self.validation_methods.get(config_type, ''), None)
        if not validation_method:
            logger.warning(f"No validation method found for config type: {config_type}")
            return True

        # Cr√©ation d'une configuration factice avec uniquement la section √† valider
        fake_config = {config_type: config}
        is_valid = validation_method(fake_config, filename)

        if not is_valid:
            for error in validator.get_validation_errors():
                logger.error(f"Validation error in {filename}: {error}")
            return False

        return True

    def _handle_config_change(self, file_path: Union[str, Path]) -> None:
        """G√®re le changement d'un fichier de configuration d√©tect√© par watchdog.

        Cette m√©thode est le point d'entr√©e principal pour le traitement des modifications
        de fichiers de configuration. Elle orchestre le processus complet de rechargement
        et de validation des configurations modifi√©es.

        Processus d√©taill√© :
        1. V√©rification que le fichier modifi√© est bien surveill√©
        2. Court d√©lai pour √©viter les lectures partielles (race condition)
        3. Chargement de la nouvelle configuration depuis le disque
        4. Validation de la configuration selon le sch√©ma appropri√©
        5. D√©tection des changements par rapport √† la configuration actuelle
        6. Mise √† jour de la configuration en m√©moire si valide
        7. Notification des callbacks enregistr√©s pour ce type de configuration

        La m√©thode est con√ßue pour √™tre robuste et s√ªre :
        - Toutes les exceptions sont attrap√©es et correctement journalis√©es
        - En cas d'√©chec de validation, la configuration pr√©c√©dente est conserv√©e
        - Les callbacks sont ex√©cut√©s dans un thread s√©par√© pour ne pas bloquer
        - Les erreurs dans les callbacks n'affectent pas le processus principal

        Args:
            file_path: Chemin vers le fichier modifi√©. Peut √™tre une cha√Æne ou un objet Path.
                      Le fichier doit √™tre dans le r√©pertoire de configuration surveill√©.

        Returns:
            None: La m√©thode ne retourne rien mais peut modifier l'√©tat interne

        Raises:
            FileNotFoundError: Si le fichier de configuration n'existe plus apr√®s modification
            yaml.YAMLError: Si le fichier contient du YAML mal form√©
            ValidationError: Si la validation est activ√©e et que la configuration est invalide

        Example:
            La m√©thode est principalement appel√©e automatiquement par watchdog :

            ```python
            # Appel manuel (d√©conseill√© sauf pour le d√©bogage)
            watcher._handle_config_change(Path('config/training.yaml'))
            ```

        Note:
            - Ne pas appeler cette m√©thode directement depuis le code utilisateur
            - Utiliser force_reload() pour forcer un rechargement depuis le code
            - Les erreurs sont journalis√©es avec un niveau d'erreur appropri√©
            - Les callbacks sont ex√©cut√©s de mani√®re asynchrone
        """
        # Normalise en objet Path si n√©cessaire
        if isinstance(file_path, str):
            file_path = Path(file_path)
        filename = file_path.name

        if filename not in self.watched_files:
            return

        config_type = self.watched_files[filename]
        # Debounce: ignore √©v√©nements dupliqu√©s dans une courte fen√™tre
        now = datetime.now()
        last_evt = self._last_event_times.get(config_type)
        if last_evt and (now - last_evt) < timedelta(milliseconds=200):
            logger.debug(f"Ignoring duplicated event for {filename}")
            return
        self._last_event_times[config_type] = now

        # Petit d√©lai pour √©viter les lectures partielles
        time.sleep(0.1)

        # Rechargement de la configuration et traitement
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                new_config = yaml.safe_load(f) or {}

            # Validation du sch√©ma
            if not self._validate_config(new_config, config_type, filename):
                logger.error(f"Configuration invalide dans {filename}, rechargement annul√©")
                return

            old_config = self.current_configs.get(config_type, {})

            # D√©tection des changements
            changes = self._detect_changes(old_config, new_config)

            if changes:
                self.current_configs[config_type] = new_config
                self.last_reload_times[config_type] = datetime.now()

                logger.info(f"üîÑ Configuration recharg√©e: {filename}")
                logger.info(f"Changements d√©tect√©s: {list(changes.keys())}")

                # Notification des callbacks
                self._notify_callbacks(config_type, new_config, changes)
            else:
                logger.debug(f"Aucun changement d√©tect√© dans {filename}")

        except yaml.YAMLError as e:
            logger.error(f"Erreur de syntaxe YAML dans {filename}: {e}")
            return
        except Exception as e:
            logger.error(f"Error handling config change for {file_path}: {e}")

    def _detect_changes(self, old_config: Dict[str, Any], new_config: Dict[str, Any]) -> Dict[str, Any]:
        """D√©tecte et analyse les diff√©rences entre deux configurations.

        Cette m√©thode compare r√©cursivement deux dictionnaires de configuration et identifie
        toutes les modifications, ajouts et suppressions. La d√©tection est effectu√©e de mani√®re
        profonde (nested) pour identifier les changements m√™me dans les structures imbriqu√©es.

        Caract√©ristiques principales :
        - D√©tection des champs ajout√©s, modifi√©s ou supprim√©s
        - Comparaison r√©cursive des dictionnaires
        - Conservation des valeurs avant/apr√®s pour chaque modification
        - Gestion des types de donn√©es courants (dict, primitifs)

        Args:
            old_config: Dictionnaire repr√©sentant l'ancienne configuration
            new_config: Dictionnaire repr√©sentant la nouvelle configuration

        Returns:
            Dict[str, Dict[str, Any]]: Dictionnaire des changements au format :
                {
                    'chemin.vers.champ': {
                        'action': 'added|modified|removed',
                        'old_value': ancienne_valeur,  # Non pr√©sent pour 'added'
                        'new_value': nouvelle_valeur    # Non pr√©sent pour 'removed'
                    },
                    ...
                }

                Les cl√©s utilisent une notation par points pour les chemins imbriqu√©s.

        Example:
            ```python
            old = {'training': {'learning_rate': 0.01, 'batch_size': 32}}
            new = {
                'training': {
                    'learning_rate': 0.02,  # Modifi√©
                    'epochs': 10            # Ajout√©
                }
                # batch_size: 32            # Supprim√©
            }

            # Retourne :
            # {
            #     'training.learning_rate': {
            #         'action': 'modified',
            #         'old_value': 0.01,
            #         'new_value': 0.02
            #     },
            #     'training.epochs': {
            #         'action': 'added',
            #         'new_value': 10
            #     },
            #     'training.batch_size': {
            #         'action': 'removed',
            #         'old_value': 32
            #     }
            # }
            ```
        """
        changes = {}

        def compare_dicts(old_dict, new_dict, path=""):
            for key, new_value in new_dict.items():
                current_path = f"{path}.{key}" if path else key

                if key not in old_dict:
                    changes[current_path] = {'action': 'added', 'new_value': new_value}
                elif isinstance(new_value, dict) and isinstance(old_dict[key], dict):
                    compare_dicts(old_dict[key], new_value, current_path)
                elif old_dict[key] != new_value:
                    changes[current_path] = {
                        'action': 'modified',
                        'old_value': old_dict[key],
                        'new_value': new_value
                    }

            # V√©rifier les cl√©s supprim√©es
            for key in old_dict:
                if key not in new_dict:
                    current_path = f"{path}.{key}" if path else key
                    changes[current_path] = {'action': 'removed', 'old_value': old_dict[key]}

        compare_dicts(old_config, new_config)
        return changes

    def _notify_callbacks(self, config_type: str, new_config: Dict[str, Any], changes: Dict[str, Any]) -> None:
        """Notifie tous les callbacks enregistr√©s pour un type de configuration.

        Cette m√©thode est responsable de l'ex√©cution de tous les callbacks enregistr√©s pour un type
        de configuration sp√©cifique. Les callbacks sont ex√©cut√©s de mani√®re asynchrone dans un thread
        s√©par√© pour √©viter de bloquer le thread principal.

        Caract√©ristiques cl√©s :
        - Ex√©cution asynchrone des callbacks
        - Isolation des erreurs (les erreurs dans un callback n'affectent pas les autres)
        - Journalisation d√©taill√©e des erreurs
        - Gestion des cas o√π il n'y a pas de callbacks enregistr√©s

        Args:
            config_type: Type de configuration qui a √©t√© modifi√©e (ex: 'training', 'environment')
            new_config: Nouvelle configuration compl√®te apr√®s application des changements
            changes: Dictionnaire des modifications d√©tect√©es, au format :
                    {
                        'chemin.vers.champ': {
                            'action': 'added|modified|removed',
                            'old_value': ancienne_valeur,  # Optionnel selon l'action
                            'new_value': nouvelle_valeur    # Optionnel selon l'action
                        },
                        ...
                    }

        Returns:
            None

        Raises:
            Aucune exception n'est propag√©e en dehors de cette m√©thode pour assurer la robustesse.
            Toutes les erreurs sont captur√©es et journalis√©es.

        Example:
            ```python
            # Exemple de callback qui pourrait √™tre notifi√©
            def log_changes(config_type, new_config, changes):
                print(f"Configuration {config_type} mise √† jour !")
                for field, change in changes.items():
                    action = change['action']
                    if action == 'added':
                        print(f"  + {field} = {change['new_value']}")
                    elif action == 'modified':
                        print(f"  ~ {field}: {change['old_value']} -> {change['new_value']}")
                    elif action == 'removed':
                        print(f"  - {field} (√©tait {change['old_value']})")

            # Enregistrement du callback
            watcher.register_callback('training', log_changes)
            ```

        Note:
            - Les callbacks sont ex√©cut√©s dans un thread s√©par√© pour √©viter de bloquer
              le thread principal pendant le traitement.
            - Les erreurs dans les callbacks sont captur√©es et journalis√©es mais ne remontent pas
              pour √©viter d'interrompre le traitement des autres callbacks.
            - L'ordre d'ex√©cution des callbacks n'est pas garanti.
        """
        if config_type in self.callbacks:
            for callback in self.callbacks[config_type]:
                try:
                    callback(config_type, new_config, changes)
                except Exception as e:
                    logger.error(f"Erreur dans le callback pour {config_type}: {e}")
                    logger.debug(f"D√©tails de l'erreur:", exc_info=True)

    def register_callback(self, config_type: str, callback: Callable):
        """Enregistre un callback pour un type de configuration sp√©cifique.

        Les callbacks enregistr√©s sont appel√©s de mani√®re asynchrone √† chaque modification
        d'un fichier de configuration du type sp√©cifi√©. Chaque callback re√ßoit trois arguments :
        - Le type de configuration modifi√©e
        - La nouvelle configuration compl√®te
        - Un dictionnaire d√©taillant les changements d√©tect√©s

        Les callbacks sont ex√©cut√©s dans un thread s√©par√© pour √©viter de bloquer
        le thread principal. Les exceptions lev√©es par les callbacks sont attrap√©es
        et journalis√©es mais n'interrompent pas le traitement.

        Args:
            config_type: Type de configuration √† surveiller (ex: 'training', 'environment')
            callback: Fonction √† appeler lors des changements. Doit avoir la signature :
                     callback(config_type: str, new_config: Dict, changes: Dict) -> None

                     O√π :
                     - config_type: Type de la configuration modifi√©e
                     - new_config: Dictionnaire contenant la configuration compl√®te
                     - changes: Dictionnaire des changements au format :
                         {
                             'chemin.vers.champ': {
                                 'old_value': ancienne_valeur,
                                 'new_value': nouvelle_valeur
                             },
                             ...
                         }

        Raises:
            ValueError: Si config_type n'est pas un type de configuration valide

        Example:
            ```python
            def log_changes(config_type, new_config, changes):
                print(f"Configuration {config_type} modifi√©e !")
                for key, change in changes.items():
                    print(f"  - {key}: {change['old_value']} -> {change['new_value']}")

            watcher.register_callback('training', log_changes)
            ```
        """
        if config_type not in self.callbacks:
            self.callbacks[config_type] = []
        if callback not in self.callbacks[config_type]:
            self.callbacks[config_type].append(callback)
        logger.info(f"Callback registered for {config_type} config changes")

    def get_config(self, config_type: str) -> Dict[str, Any]:
        """R√©cup√®re la configuration actuelle pour un type donn√©.

        Cette m√©thode permet d'acc√©der √† la derni√®re version connue d'une configuration
        d'un type sp√©cifique. La configuration retourn√©e est une copie pour √©viter les
        modifications accidentelles de l'√©tat interne.

        La m√©thode est thread-safe et peut √™tre appel√©e de n'importe quel thread.

        Args:
            config_type: Type de configuration √† r√©cup√©rer (ex: 'training', 'environment')

        Returns:
            Dict[str, Any]: Copie de la configuration actuelle pour le type demand√©.
                         Retourne un dictionnaire vide si la configuration n'existe pas.

        Raises:
            KeyError: Si le type de configuration n'existe pas dans watched_files

        Example:
            ```python
            # R√©cup√©ration de la configuration d'entra√Ænement
            try:
                training_config = watcher.get_config('training')
                print(f"Taux d'apprentissage: {training_config.get('learning_rate')}")
            except KeyError:
                print("Configuration d'entra√Ænement non trouv√©e")

            # V√©rification de l'existence avant acc√®s
            if 'environment' in watcher.current_configs:
                env_config = watcher.get_config('environment')
            ```
        """
        return self.current_configs.get(config_type)

    def get_all_configs(self) -> Dict[str, Dict[str, Any]]:
        """R√©cup√®re une copie de toutes les configurations actuellement charg√©es.

        Cette m√©thode retourne un dictionnaire contenant toutes les configurations
        actuellement en m√©moire, organis√©es par type de configuration. Chaque configuration
        est retourn√©e sous forme de copie pour √©viter toute modification accidentelle
        de l'√©tat interne du ConfigWatcher.

        Caract√©ristiques cl√©s :
        - Retourne une copie profonde des configurations pour √©viter les effets de bord
        - Pr√©serve la structure hi√©rarchique des configurations
        - Ne d√©clenche pas de rechargement des fichiers de configuration
        - Op√©ration thread-safe

        Returns:
            Dict[str, Dict[str, Any]]: Dictionnaire des configurations au format :
                {
                    'type_config1': { ... },  # Configuration compl√®te pour le type 1
                    'type_config2': { ... },  # Configuration compl√®te pour le type 2
                    ...
                }

                Les cl√©s correspondent aux types de configuration (ex: 'training', 'environment')
                et les valeurs sont des dictionnaires contenant la configuration compl√®te.

        Example:
            ```python
            # R√©cup√©ration de toutes les configurations
            all_configs = watcher.get_all_configs()

            # Acc√®s √† des configurations sp√©cifiques
            training_config = all_configs.get('training', {})
            env_config = all_configs.get('environment', {})

            # It√©ration sur toutes les configurations
            for config_type, config in all_configs.items():
                print(f"Type de configuration: {config_type}")
                print(f"Nombre de param√®tres: {len(config)}")
            ```

        Note:
            - Les configurations retourn√©es sont une copie √† plat de l'√©tat actuel.
            - Les modifications apport√©es au dictionnaire retourn√© n'affecteront pas
              la configuration interne du ConfigWatcher.
            - Pour mettre √† jour une configuration, il faut modifier le fichier
              de configuration correspondant sur le disque.
        """
        return {k: v.copy() for k, v in self.current_configs.items()}

    def force_reload(self, config_type: Optional[str] = None) -> None:
        """Force le rechargement d'une configuration sp√©cifique ou de toutes les configurations.

        Cette m√©thode permet de forcer manuellement le rechargement d'un ou plusieurs fichiers
        de configuration depuis le disque. Elle est utile lorsque des modifications ont √©t√©
        apport√©es aux fichiers de configuration en dehors du syst√®me de surveillance, ou pour
        forcer une relecture apr√®s des erreurs de chargement pr√©c√©dentes.

        Caract√©ristiques cl√©s :
        - Recharge les configurations depuis le disque, ignorant le cache
        - Valide les configurations avant de les appliquer
        - D√©clenche les callbacks enregistr√©s en cas de modifications d√©tect√©es
        - G√®re √† la fois le rechargement d'un type sp√©cifique ou de tous les types

        Args:
            config_type: Type de configuration √† recharger. Si None, recharge toutes les configurations.
                       Doit correspondre √† une cl√© de watched_files.

        Returns:
            None

        Raises:
            FileNotFoundError: Si le fichier de configuration sp√©cifi√© n'existe pas
            yaml.YAMLError: Si le fichier de configuration contient du YAML invalide
            ValidationError: Si la validation est activ√©e et que la configuration est invalide

        Example:
            ```python
            # Recharger une configuration sp√©cifique
            try:
                watcher.force_reload('training')
                print("Configuration 'training' recharg√©e avec succ√®s")
            except Exception as e:
                print(f"Erreur lors du rechargement: {e}")

            # Recharger toutes les configurations
            watcher.force_reload()
            ```

        Note:
            - Cette m√©thode est bloquante jusqu'√† ce que le rechargement soit termin√©
            - Les erreurs de validation n'entra√Ænent pas la modification de la configuration actuelle
            - Les configurations sont recharg√©es dans l'ordre alphab√©tique des noms de fichiers
        """
        if config_type:
            if config_type in self.watched_files:
                file_path = Path(self.config_dir) / self.watched_files[config_type]
                logger.info(f"Forcing reload of {config_type} config from {file_path}")
                self._load_config_file(file_path)
            else:
                logger.warning(f"No watched config file for type: {config_type}")
        else:
            # Recharger toutes les configurations
            logger.info("Forcing reload of all configurations")
            for file_path in sorted(Path(self.config_dir).glob('*.yaml')):
                if file_path.name in self.watched_files.values():
                    self._load_config_file(file_path)
                    self._handle_config_change(str(config_path))

    def get_reload_status(self) -> Dict[str, Any]:
        """R√©cup√®re des informations sur l'√©tat actuel des rechargements de configuration.

        Cette m√©thode fournit un aper√ßu de l'√©tat de surveillance des configurations,
        y compris les horodatages des derniers rechargements r√©ussis pour chaque type
        de configuration et la liste des fichiers surveill√©s.

        Returns:
            Dict[str, Any]: Un dictionnaire contenant :
                - 'last_reload_times': Dictionnaire des derniers rechargements par type de configuration.
                                     Les valeurs sont des cha√Ænes au format ISO ou None si jamais recharg√©.
                - 'watched_files': Liste des noms de fichiers actuellement surveill√©s.

        Example:
            ```python
            # R√©cup√©ration du statut
            status = watcher.get_reload_status()

            # Affichage des informations
            print("Fichiers surveill√©s:", status['watched_files'])
            print("\nDerniers rechargements:")
            for config_type, timestamp in status['last_reload_times'].items():
                print(f"- {config_type}: {timestamp or 'Jamais'}")

            # Sortie possible:
            # Fichiers surveill√©s: ['training.yaml', 'environment.yaml']
            #
            # Derniers rechargements:
            # - training: 2023-04-01T15:30:45.123456
            # - environment: None
            ```

        Note:
            - Les horodatages sont en temps UTC
            - Un horodatage √† None signifie que la configuration n'a jamais √©t√© recharg√©e avec succ√®s
            - La liste des fichiers surveill√©s est dynamique et peut changer si la configuration change
        """
        return {
            'last_reload_times': {
                k: v.isoformat() if v else None
                for k, v in self.last_reload_times.items()
            },
            'watched_files': list(self.watched_files.keys())
        }

    def stop(self) -> None:
        """Arr√™te d√©finitivement la surveillance des fichiers de configuration.

        Cette m√©thode arr√™te le thread d'observation des fichiers et lib√®re les ressources associ√©es.
        Une fois arr√™t√©, le ConfigWatcher ne d√©tectera plus les modifications des fichiers de configuration
        jusqu'√† ce qu'une nouvelle instance soit cr√©√©e.

        Caract√©ristiques cl√©s :
        - Arr√™t propre de l'observateur de fichiers
        - Lib√©ration des ressources syst√®me
        - Op√©ration idempotente (peut √™tre appel√©e plusieurs fois sans effet secondaire)
        - D√©sactive d√©finitivement la surveillance

        Returns:
            None

        Example:
            ```python
            # Cr√©ation et d√©marrage du surveillant
            watcher = ConfigWatcher("chemin/vers/configs")

            # ... utilisation du surveillant ...

            # Arr√™t propre lorsque plus n√©cessaire
            watcher.stop()

            # Appels ult√©rieurs n'ont aucun effet
            watcher.stop()  # Sans effet
            ```

        Note:
            - Cette m√©thode est automatiquement appel√©e lors de la destruction de l'objet
              si le gestionnaire de contexte (with) est utilis√©
            - Apr√®s l'appel √† stop(), le ConfigWatcher ne peut pas √™tre red√©marr√©
            - Tous les callbacks enregistr√©s sont conserv√©s mais ne seront plus notifi√©s
        """
        if self.observer:
            logger.info("Arr√™t de la surveillance des fichiers de configuration")
            self.observer.stop()
            self.observer.join()
            self.observer = None
            logger.info("ConfigWatcher stopped")

    def __enter__(self) -> 'ConfigWatcher':
        """M√©thode d'entr√©e du gestionnaire de contexte.

        Cette m√©thode est appel√©e au d√©but d'un bloc `with`. Elle permet d'utiliser
        le ConfigWatcher avec la syntaxe `with`, garantissant que les ressources
        seront correctement lib√©r√©es √† la fin du bloc.

        Returns:
            ConfigWatcher: L'instance actuelle du ConfigWatcher

        Example:
            ```python
            # Utilisation avec le gestionnaire de contexte
            with ConfigWatcher("chemin/vers/configs") as watcher:
                # Le ConfigWatcher est actif ici
                config = watcher.get_config('training')
                # ...

            # Ici, le ConfigWatcher est automatiquement arr√™t√©
            ```
        """
        return self

    def __exit__(self, exc_type: Optional[Type[BaseException]],
                exc_val: Optional[BaseException],
                exc_tb: Optional[TracebackType]) -> None:
        """M√©thode de sortie du gestionnaire de contexte.

        Cette m√©thode est appel√©e √† la fin d'un bloc `with`. Elle garantit que
        les ressources du ConfigWatcher sont correctement lib√©r√©es, m√™me en cas d'erreur.

        Args:
            exc_type: Type de l'exception lev√©e dans le bloc, ou None si aucune
            exc_val: Instance de l'exception lev√©e, ou None
            exc_tb: Traceback de l'exception, ou None

        Returns:
            None. Si une exception a √©t√© pass√©e, elle est √† nouveau lev√©e apr√®s le nettoyage.

        Note:
            - Si une exception s'est produite dans le bloc `with`, elle est journalis√©e
              mais pas intercept√©e (laiss√©e se propager)
            - La m√©thode est appel√©e dans tous les cas, que le bloc se termine normalement
              ou par une exception
        """
        self.stop()

def config_change_callback(config_type: str) -> Callable:
    """D√©corateur pour enregistrer automatiquement une m√©thode comme callback de changement de configuration.

    Ce d√©corateur permet d'enregistrer une m√©thode de classe comme callback pour √™tre notifi√©e
    des changements de configuration d'un type sp√©cifique. La m√©thode d√©cor√©e sera automatiquement
    appel√©e √† chaque modification de la configuration du type sp√©cifi√©.

    Args:
        config_type (str): Type de configuration √† surveiller (ex: 'training', 'environment')

    Returns:
        Callable: Le d√©corateur qui enregistrera la m√©thode comme callback

    Example:
        class MonComposant:
            def __init__(self, config_watcher):
                self.config_watcher = config_watcher
                self.config_watcher.register_callback('training', self.on_training_config_change)

            @config_reactive('training')
            def on_training_config_change(self, config_type, new_config, changes):
                print(f"Mise √† jour de la configuration {config_type}")
                for key, change in changes.items():
                    print(f"  - {key}: {change.get('old_value')} -> {change.get('new_value')}")
    """
    def decorator(func):
        func._config_reactive = True
        func._config_type = config_type
        return func
    return decorator

# Backward-compatible alias expected by tests and examples
# Tests import `config_reactive` from this module; keep both names.
config_reactive = config_change_callback

# Exemple d'utilisation
if __name__ == "__main__":
    def on_training_config_change(config_type: str, new_config: Dict[str, Any], changes: Dict[str, Any]):
        print(f"Training config changed: {changes}")
        # Ici on pourrait ajuster les param√®tres de l'agent
        if 'learning_rate' in changes:
            print(f"Learning rate changed to: {new_config.get('learning_rate')}")

    def on_environment_config_change(config_type: str, new_config: Dict[str, Any], changes: Dict[str, Any]):
        print(f"Environment config changed: {changes}")
        # Ici on pourrait ajuster les param√®tres de l'environnement

    # Test du ConfigWatcher
    with ConfigWatcher("config") as watcher:
        watcher.register_callback('training', on_training_config_change)
        watcher.register_callback('environment', on_environment_config_change)

        print("ConfigWatcher running... Modify config files to see changes")
        print("Press Ctrl+C to stop")

        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            print("Stopping ConfigWatcher...")
