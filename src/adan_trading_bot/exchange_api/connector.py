"""
Module de connexion aux exchanges via CCXT pour le syst√®me ADAN.
G√®re l'initialisation des clients d'exchange et la connexion aux APIs.
"""

import ccxt
import os
import time
from typing import Optional, Dict, Any
from ..common.utils import get_logger

logger = get_logger(__name__)


class ExchangeConnectionError(Exception):
    """Exception lev√©e lors d'erreurs de connexion √† l'exchange."""
    pass


class ExchangeConfigurationError(Exception):
    """Exception lev√©e lors d'erreurs de configuration de l'exchange."""
    pass


def get_exchange_client(config: Dict[str, Any]) -> ccxt.Exchange:
    """
    Initialise et retourne un client d'exchange CCXT bas√© sur la configuration.
    Lit les cl√©s API depuis les variables d'environnement.
    
    Args:
        config: Configuration compl√®te du syst√®me contenant la section paper_trading
        
    Returns:
        ccxt.Exchange: Client d'exchange initialis√© et configur√©
        
    Raises:
        ExchangeConfigurationError: Si la configuration est invalide
        ExchangeConnectionError: Si la connexion √† l'exchange √©choue
        ValueError: Si les cl√©s API sont manquantes
    """
    paper_config = config.get('paper_trading', {})
    exchange_id = paper_config.get('exchange_id')
    use_testnet = paper_config.get('use_testnet', False)

    if not exchange_id:
        logger.error("L'ID de l'exchange (exchange_id) n'est pas sp√©cifi√© dans la configuration paper_trading.")
        raise ExchangeConfigurationError("exchange_id manquant dans la configuration paper_trading.")

    # D√©terminer les noms des variables d'environnement pour les cl√©s API
    # Convention: {EXCHANGE_ID_UPPER}_API_KEY, {EXCHANGE_ID_UPPER}_SECRET_KEY
    # Pour Testnet: {EXCHANGE_ID_UPPER}_TESTNET_API_KEY, {EXCHANGE_ID_UPPER}_TESTNET_SECRET_KEY
    
    env_key_prefix = exchange_id.upper()
    if use_testnet:
        env_key_prefix += "_TESTNET"
        
    api_key_env_var = f"{env_key_prefix}_API_KEY"
    secret_key_env_var = f"{env_key_prefix}_SECRET_KEY"
    
    api_key = os.environ.get(api_key_env_var)
    secret_key = os.environ.get(secret_key_env_var)

    if not api_key or not secret_key:
        logger.error(f"Cl√©s API ({api_key_env_var}, {secret_key_env_var}) non trouv√©es pour {exchange_id} {'Testnet' if use_testnet else 'Live'}.")
        raise ValueError(f"Cl√©s API manquantes pour {exchange_id} {'Testnet' if use_testnet else 'Live'}. "
                        f"V√©rifiez les variables d'environnement {api_key_env_var} et {secret_key_env_var}.")

    try:
        # V√©rifier que l'exchange est support√© par CCXT
        if not hasattr(ccxt, exchange_id):
            logger.error(f"L'ID d'exchange '{exchange_id}' n'est pas support√© par CCXT.")
            raise ExchangeConfigurationError(f"Exchange ID '{exchange_id}' non support√© par CCXT.")
        
        exchange_class = getattr(ccxt, exchange_id)
        
        # Configuration de base du client
        client_config = {
            'apiKey': api_key,
            'secret': secret_key,
            'timeout': 30000,  # 30 secondes
            'rateLimit': 1200,  # Limite de taux par d√©faut
            'options': {
                'defaultType': 'spot',  # Trading spot par d√©faut
            },
        }
        
        # Initialiser le client d'exchange
        exchange = exchange_class(client_config)

        # Activer le mode testnet si demand√©
        if use_testnet:
            if hasattr(exchange, 'set_sandbox_mode'):
                exchange.set_sandbox_mode(True)
                logger.info(f"Client CCXT pour '{exchange_id}' initialis√© en mode TESTNET.")
            else:
                logger.warning(f"L'exchange '{exchange_id}' ne supporte peut-√™tre pas set_sandbox_mode(). "
                             "V√©rifiez la configuration manuelle des URLs si n√©cessaire.")
        else:
            logger.info(f"Client CCXT pour '{exchange_id}' initialis√© en mode LIVE (PRODUCTION).")
            logger.warning("‚ö†Ô∏è  MODE LIVE ACTIV√â - ATTENTION AUX ORDRES R√âELS ‚ö†Ô∏è")
        
        # Test de connectivit√© de base
        try:
            server_time = exchange.fetch_time()
            logger.info(f"Connexion √† {exchange_id} r√©ussie. Heure du serveur: {exchange.iso8601(server_time)}")
        except Exception as e_conn:
            logger.error(f"√âchec du test de connexion √† {exchange_id}: {e_conn}")
            raise ExchangeConnectionError(f"Impossible de se connecter √† {exchange_id}") from e_conn
        
        return exchange
        
    except AttributeError:
        logger.error(f"L'ID d'exchange '{exchange_id}' n'est pas un attribut valide de ccxt.")
        raise ExchangeConfigurationError(f"Exchange ID '{exchange_id}' non support√© par CCXT.") from None
    except Exception as e:
        logger.error(f"Erreur lors de l'initialisation du client d'exchange CCXT pour '{exchange_id}': {e}")
        raise ExchangeConnectionError(f"Erreur d'initialisation CCXT pour {exchange_id}.") from e


def test_exchange_connection(exchange: ccxt.Exchange) -> Dict[str, Any]:
    """
    Teste la connexion √† l'exchange et retourne des informations de diagnostic.
    
    Args:
        exchange: Client d'exchange CCXT initialis√©
        
    Returns:
        Dict contenant les r√©sultats des tests de connexion
    """
    results = {
        'exchange_id': exchange.id,
        'testnet_mode': getattr(exchange, 'sandbox', False),
        'server_time': None,
        'markets_loaded': False,
        'balance_accessible': False,
        'market_count': 0,
        'errors': []
    }
    
    try:
        # Test 1: Heure du serveur
        server_time = exchange.fetch_time()
        results['server_time'] = exchange.iso8601(server_time)
        logger.info(f"‚úÖ Heure du serveur: {results['server_time']}")
    except Exception as e:
        error_msg = f"‚ùå Erreur lors de la r√©cup√©ration de l'heure du serveur: {e}"
        logger.error(error_msg)
        results['errors'].append(error_msg)
    
    try:
        # Test 2: Chargement des march√©s
        markets = exchange.load_markets()
        results['markets_loaded'] = True
        results['market_count'] = len(markets)
        logger.info(f"‚úÖ March√©s charg√©s: {results['market_count']} paires disponibles")
        
        # V√©rifier quelques paires importantes
        important_pairs = ['BTC/USDT', 'ETH/USDT', 'ADA/USDT']
        available_pairs = [pair for pair in important_pairs if pair in markets]
        if available_pairs:
            logger.info(f"‚úÖ Paires importantes disponibles: {', '.join(available_pairs)}")
        else:
            logger.warning("‚ö†Ô∏è Aucune paire importante trouv√©e dans les march√©s disponibles")
            
    except Exception as e:
        error_msg = f"‚ùå Erreur lors du chargement des march√©s: {e}"
        logger.error(error_msg)
        results['errors'].append(error_msg)
    
    try:
        # Test 3: Acc√®s au solde
        balance = exchange.fetch_balance()
        results['balance_accessible'] = True
        
        # Afficher les soldes non nuls
        non_zero_balances = {currency: amount for currency, amount in balance['total'].items() if amount > 0}
        if non_zero_balances:
            logger.info(f"‚úÖ Soldes disponibles: {non_zero_balances}")
        else:
            logger.info("‚ÑπÔ∏è Aucun solde disponible ou tous les soldes sont √† z√©ro")
            
    except Exception as e:
        error_msg = f"‚ùå Erreur lors de l'acc√®s au solde: {e}"
        logger.error(error_msg)
        results['errors'].append(error_msg)
    
    # R√©sum√© du test
    if not results['errors']:
        logger.info("üéâ Tous les tests de connexion ont r√©ussi !")
    else:
        logger.warning(f"‚ö†Ô∏è {len(results['errors'])} erreur(s) d√©tect√©e(s) lors des tests de connexion")
    
    return results


def get_market_info(exchange: ccxt.Exchange, symbol: str) -> Optional[Dict[str, Any]]:
    """
    R√©cup√®re les informations d√©taill√©es d'un march√© sp√©cifique.
    
    Args:
        exchange: Client d'exchange CCXT
        symbol: Symbole du march√© (ex: 'BTC/USDT')
        
    Returns:
        Dict contenant les informations du march√© ou None si non trouv√©
    """
    try:
        markets = exchange.load_markets()
        if symbol not in markets:
            logger.warning(f"March√© '{symbol}' non trouv√© sur {exchange.id}")
            return None
        
        market = markets[symbol]
        
        # Extraire les informations importantes
        market_info = {
            'symbol': market['symbol'],
            'base': market['base'],
            'quote': market['quote'],
            'active': market.get('active', True),
            'type': market.get('type', 'spot'),
            'spot': market.get('spot', True),
            'margin': market.get('margin', False),
            'future': market.get('future', False),
            'limits': market.get('limits', {}),
            'precision': market.get('precision', {}),
            'fees': market.get('fees', {}),
        }
        
        logger.info(f"Informations du march√© {symbol}: {market_info}")
        return market_info
        
    except Exception as e:
        logger.error(f"Erreur lors de la r√©cup√©ration des informations du march√© {symbol}: {e}")
        return None


def validate_exchange_config(config: Dict[str, Any]) -> bool:
    """
    Valide la configuration de l'exchange avant l'initialisation.
    
    Args:
        config: Configuration compl√®te du syst√®me
        
    Returns:
        bool: True si la configuration est valide, False sinon
    """
    paper_config = config.get('paper_trading', {})
    
    # V√©rifications de base
    if not paper_config:
        logger.error("Section 'paper_trading' manquante dans la configuration")
        return False
    
    exchange_id = paper_config.get('exchange_id')
    if not exchange_id:
        logger.error("'exchange_id' manquant dans la configuration paper_trading")
        return False
    
    # V√©rifier que l'exchange est support√© par CCXT
    if not hasattr(ccxt, exchange_id):
        logger.error(f"Exchange '{exchange_id}' non support√© par CCXT")
        return False
    
    # V√©rifier la pr√©sence des variables d'environnement
    use_testnet = paper_config.get('use_testnet', False)
    env_key_prefix = exchange_id.upper()
    if use_testnet:
        env_key_prefix += "_TESTNET"
    
    api_key_env_var = f"{env_key_prefix}_API_KEY"
    secret_key_env_var = f"{env_key_prefix}_SECRET_KEY"
    
    if not os.environ.get(api_key_env_var):
        logger.error(f"Variable d'environnement '{api_key_env_var}' non d√©finie")
        return False
    
    if not os.environ.get(secret_key_env_var):
        logger.error(f"Variable d'environnement '{secret_key_env_var}' non d√©finie")
        return False
    
    logger.info("‚úÖ Configuration de l'exchange valid√©e avec succ√®s")
    return True